hw0
cloned my selfie repo to my machine
added print my name to begin of selfie()
travis did not work straight away, but relogging to github did the job

hw1
add -x option in selfie()
redirected to selfie_run(DOUBLEMIPSTER)
selfie_run 
	create a similar second context and links them as a cyclic single linked list to easily traverse them (setNextContext(currentContext, previousContext) and the other way around)
	selfie_run then starts the doublemipster(), which is a modified copy of mipster(). with either of the two contexts as input
doublemipster()	
	instead of stopping the context(s) every 10 000 000 instructions, we set the timeout to 1
	instead of using the same context all the time, every timeout, we go one step further in the single linked list of contexts (toContext = getNextContext(fromContext)).
	in our case, with two contexts, it now switches between those two contexts, executing one instruction at a time
	the first time "handleSystemCalls(fromContext) == EXIT" is true, it should not yet return, but do another round for the second context to finish
	also, after the first context is finished, the switch does not take place anymore (if(firstEnded) toContext = fromContext;)

i was not sure how to test if the second program finishes, after the first one stopped, even if the second program is longer then the first. i decided to put a large number of instructions for the inital iteration, so the first program can finish sooner.
after the first iteration on the first context was finished, i set the timeout to 1 instruction. Now the second program should run concurrently to the first, but starting and finishing later. By enabling the debug_switch option, i could verify that behavior.

hw2
added global SYSCALL_LOCK and SYSCALL_UNLOCK
wrote emitLock() for setting up the mips code, analog for emitUnlock()
	added procedurename and location to lib table, so it can be parsed
	made a syscall with id SYSCALL_LOCK
	need to call emitLock() function in selfie_compile() to make it part of the binary
	now selfie doesnt complain anymore about lock() being an unknown procedure, but an unknown syscall
wrote implementLock() for handling the lock() syscall
	change the global variable writeLockContext to the caller context, if no other context is locked (if(writeLockContext == (uint64_t*) 0) { writeLockContext = context;} )
	if some context has already aquired the lock and it is not the caller, then the caller will now (at lock() in the sourcecode) be in a loop until the lock is released. (setPC(context, getPC(context) - INSTRUCTIONSIZE);)
wrote implementUnlock() for handling the unlock() syscall
	if the caller context is indeed the current owner of the lock (so it has the permission), we can safely remove it (writeLockContext = (uint64_t*) 0;)
handleSystemCalls()
	redirect the syscall SYSCALL_LOCK to implementLock(), now lock() is no longer an unknown syscall and redirects to implementLock(), analog for unlock()
	redirect SYSCALL_WRITE to implementWrite() 
		if no lock is set, as usual to implementWrite()
		if a lock is set (and some context want to write) we only let it write/redirect to implementWrite, if the caller is the owner of the lock
		if the context isn't the owner, we let it loop. We do so by decreasing the pc of that context by one instruction, so the write syscall will come over and over again until at some point the lock is released and the looping context can take it. It will be the owner, execute the write and thereby break the loop.

i had troubles with finding a waiting/pausing strategy for my contexts and i feel like the looping method by decreasing the pc is suboptimal

hw4
implemented doublehypster like doublemipster, but with bootlevelzero condition for the lowest execution level
i had problems because of my previous implementation of doublemipster, because using the context's own nextContext field for linking the two contexts apparently was no good idea (two different uses for one data field)
so i created a simple null-terminated context(pointer) list and pass this to doublemipster/hypster

hw5
implemented multihypster with my own contexts list in a round robin fashion.
added fork system call. on implementFork
	create a deep copy of the currently executing context
		set all int contexts values mit getter and setter
		pointer, especially pagetable and register need their own space, Both of them need to be newly allocated and every entry (regstervalues, pages) need to be copied one by one to bea true deep copy.
	add the copied context to my contexts list of executing contexts
	set the return register values accordingly, so on fork() return we can idetify if we are the copied or original context and do things depending on that information

hw6
generalize my executable contexts list functions to be able to operate on different lists (to use it also for the childlist later)
added two systemcalls, done as usual
make prints function for my own context lists
added process status to context, initialize with ready
adjusted my multimipster/multihypster to reflect process states
	if a context gets an exit call, i dont remove the context anymore but set its state to "exited" (this is valid for child- and parentcontexts)
	only switch to ready contexts (inside getNextExecutableContext())
	now returns when no context is ready or waiting. 
	also returns if a context is waiting and there are no running (ready/waiting) children for that context (getNextExecutableContext will return a nullpointer) 
add childlist to context struct to remember created childcontexts to be able to resolve the wait() syscall.
add child on fork to parents childlist
implementWait: set contexts state to waiting
add check for waiting state in getNextExecutableContext and handle it in handleWaiting()
	At first i want to check if the basic suspension of execution for the parent works.
		if context has an exited child (zombie), i just set the context to ready again. Now, after the wait call of the parent, it will be suspended until a child finishes.
		The waiting state suspends a context, because in those cases, getNextExecutableContext() will recursevly search the next element to return.
		This might also be the previously waiting context itself, if a handleWaiting() has meanwhile set the waiting contexts status back to ready.
	Now i can also retrieve the childs pid, set it in return register of the parent, free the child and verify all of that in the testprogram.
	(check if the process can still continue. if there is at least one child, check for every waiting child the same, else return nullpointer (shut down emulator/hypervisor))
changed from childList zu parentpointer in child, so i dont have to delete the context in two places. getChildList() now operates on execContexts and calculates the childs anew each time.
implementKill takes a pid (needs to be loaded in emit and retrieved in implement function) and calls killContext()
	the contex to kill gets searched and if found, i put an exitcall in its registers and return 0, else 1.


i decided not to make an extra zombie_state as it seemed redundant to state_exited to me.
i increase maxpid and set pid in allocateContext, but (i think) this also gets called by hypster which causes it to tick up even though it shouldnt. 
	The ids are still unique and the ticks are just the number of processes, so its not much and therefore i dont see a problem.
	i prefer this solution so the pid will definately be incresed, independently of where i create the context (at creating them "manually" in selfie_run for doublemipster or at a fork)

my queastions-list that arose during programming
? a childcontext (as well as secondContext, thirdcontext) now stays in the contextsToExecute/usedContexts List, even after they exited, if the parent does not wait-kill-combo it) ok?
? "A `kill` syscall forces the termination of the child process given in input" .. termination means only delete from the contextsToExecute/usedContexts List ?
? would kill also be able to delete a parentcontext
? now my own list implementation is useful? ì dont need arguments vctxt and parent like in findcontext?
? i dont need a reference from child to parent?
? zombie not an extra process state?

hw7
