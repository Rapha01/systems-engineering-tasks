hw0
cloned my selfie repo to my machine
added print my name to begin of selfie()
travis did not work straight away, but relogging to github did the job

hw1
add -x option in selfie()
redirected to selfie_run(DOUBLEMIPSTER)
selfie_run 
	create a similar second context and links them as a cyclic single linked list to easily traverse them (setNextContext(currentContext, previousContext) and the other way around)
	selfie_run then starts the doublemipster(), which is a modified copy of mipster(). with either of the two contexts as input
doublemipster()	
	instead of stopping the context(s) every 10 000 000 instructions, we set the timeout to 1
	instead of using the same context all the time, every timeout, we go one step further in the single linked list of contexts (toContext = getNextContext(fromContext)).
	in our case, with two contexts, it now switches between those two contexts, executing one instruction at a time
	the first time "handleSystemCalls(fromContext) == EXIT" is true, it should not yet return, but do another round for the second context to finish
	also, after the first context is finished, the switch does not take place anymore (if(firstEnded) toContext = fromContext;)

i was not sure how to test if the second program finishes, after the first one stopped, even if the second program is longer then the first. i decided to put a large number of instructions for the inital iteration, so the first program can finish sooner.
after the first iteration on the first context was finished, i set the timeout to 1 instruction. Now the second program should run concurrently to the first, but starting and finishing later. By enabling the debug_switch option, i could verify that behavior.